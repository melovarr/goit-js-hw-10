{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst myInput = document.querySelector(\"#datetime-picker\");\nconst startBtn = document.querySelector(\"[data-start]\");\nstartBtn.addEventListener('click', timerStart);\nstartBtn.disabled = true;\nlet userSelectedDate;\n\n\nflatpickr(\"#datetime-picker\", {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\nif (userSelectedDate < new Date()){\n    startBtn.disabled = true;\n    errorMessage();\n    return;\n}\nstartBtn.disabled = false;\n},\n});\n\n\nfunction errorMessage(){\n    iziToast.error({\n        message: 'Please choose a date in the future',\n        messageColor: '#fff',\n        backgroundColor: 'red',\n        position: 'topCenter'\n    })\n}\n\n\nfunction timerStart(){\n    this.disabled = true;\n    myInput.disabled = true;\n    const intervalId = setInterval(() => {\n        const timeValue = (userSelectedDate - new Date()) / 1000;\n        if (Math.floor(timeValue) / 1000 === 0) {\n            clearInterval(intervalId);\n            myInput.disabled = false;\n        }\n        setTime(convertMs(userSelectedDate - new Date()));\n    }, 1000);\n}\n\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n    return [ days, hours, minutes, seconds ];\n}\n\nfunction setTime(times) {\nconst counters = document.querySelectorAll('.value');\ntimes.forEach((time, index) => {\n    counters[index].textContent = String(time).padStart(2, '0');\n});\n}\n\n\n// iziToast.show({\n//     title: 'Hey',\n//     titleColor: 'red',\n//     position:'center',\n//     message: 'What would you like to add?',\n//     messageColor: 'blue',\n//     theme: 'dark',\n//     color: 'yellow'\n// });\n\n\n\n// let userSelectedDate;\n// const btn = document.querySelector('[data-start]');\n// const closeBtn = document.querySelector('.closebtn');\n// const input = document.querySelector('#datetime-picker');\n// btn.disabled = true;\n\n// const options = {\n// \tenableTime: true,\n// \ttime_24hr: true,\n// \tdefaultDate: new Date(),\n// \tminuteIncrement: 1,\n// \tonClose(selectedDates) {\n// \t\tuserSelectedDate = selectedDates[0];\n// \t\tconst now = new Date();\n// \t\tif (userSelectedDate < now) {\n// \t\t\tbtn.disabled = true;\n// \t\t\tcreateError();\n// \t\t\treturn;\n// \t\t}\n// \t\tbtn.disabled = false;\n// \t},\n// };\n\n// function createError() {\n// \tiziToast.error({\n// \t\tmessage: 'Please choose a date in the future',\n// \t\tmessageColor: '#ffffff',\n// \t\tmessageSize: '16px',\n// \t\tbackgroundColor: '#ef4040',\n// \t\tposition: 'topRight',\n// \t});\n// }\n\n// function timerButtonHandler() {\n// \tthis.disabled = true;\n// \tinput.disabled = true;\n\n// \tconst intervalId = setInterval(() => {\n// \t\tconst timeData = (userSelectedDate - new Date()) / 1000;\n// \t\tif (Math.floor(timeData) / 1000 === 0) {\n// \t\t\tclearInterval(intervalId);\n// \t\t\tinput.disabled = false;\n// \t\t}\n\n// \t\tsetTime(convertMs(userSelectedDate - new Date()));\n// \t}, 1000);\n// }\n\n// // function convertMs(ms) {\n// // \tconst second = 1000;\n// // \tconst minute = second * 60;\n// // \tconst hour = minute * 60;\n// // \tconst day = hour * 24;\n\n// // \tconst days = Math.floor(ms / day);\n// // \tconst hours = Math.floor((ms % day) / hour);\n// // \tconst minutes = Math.floor(((ms % day) % hour) / minute);\n// // \tconst seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n// // \treturn [days, hours, minutes, seconds];\n// // }\n\n// function setTime(times) {\n// \tconst counters = document.querySelectorAll('.value');\n// \ttimes.forEach((time, index) => {\n// \t\tcounters[index].textContent = addLeadingZero(time);\n// \t});\n// }\n\n// function addLeadingZero(value) {\n// \treturn String(value).padStart(2, '0');\n// }\n\n// flatpickr(input, options);\n\n// btn.addEventListener('click', timerButtonHandler);"],"names":["myInput","startBtn","timerStart","userSelectedDate","flatpickr","selectedDates","errorMessage","iziToast","intervalId","timeValue","setTime","convertMs","ms","days","hours","minutes","seconds","times","counters","time","index"],"mappings":"+IAMA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAW,SAAS,cAAc,cAAc,EACtDA,EAAS,iBAAiB,QAASC,CAAU,EAC7CD,EAAS,SAAW,GACpB,IAAIE,EAGJC,EAAU,mBAAoB,CAC1B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAE3B,GADQF,EAAmBE,EAAc,CAAC,EACtCF,EAAmB,IAAI,KAAO,CAC9BF,EAAS,SAAW,GACpBK,IACA,MACJ,CACAL,EAAS,SAAW,EACpB,CACA,CAAC,EAGD,SAASK,GAAc,CACnBC,EAAS,MAAM,CACX,QAAS,qCACT,aAAc,OACd,gBAAiB,MACjB,SAAU,WAClB,CAAK,CACL,CAGA,SAASL,GAAY,CACjB,KAAK,SAAW,GAChBF,EAAQ,SAAW,GACnB,MAAMQ,EAAa,YAAY,IAAM,CACjC,MAAMC,GAAaN,EAAmB,IAAI,MAAU,IAChD,KAAK,MAAMM,CAAS,EAAI,MAAS,IACjC,cAAcD,CAAU,EACxBR,EAAQ,SAAW,IAEvBU,EAAQC,EAAUR,EAAmB,IAAI,IAAM,CAAC,CACnD,EAAE,GAAI,CACX,CAGA,SAASQ,EAAUC,EAAI,CAMnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAEC,EAAMC,EAAOC,EAASC,CAAO,CAC1C,CAEA,SAASN,EAAQO,EAAO,CACxB,MAAMC,EAAW,SAAS,iBAAiB,QAAQ,EACnDD,EAAM,QAAQ,CAACE,EAAMC,IAAU,CAC3BF,EAASE,CAAK,EAAE,YAAc,OAAOD,CAAI,EAAE,SAAS,EAAG,GAAG,CAC9D,CAAC,CACD"}